version: '3.8'

services:
  app:
    image: permissoes-app:latest  # Nome da imagem do aplicativo Spring Boot
    container_name: permissoes-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Porta exposta para acessar a aplicação
    environment:
      # Configurações para o RabbitMQ
      SPRING_RABBITMQ_HOST: rabbitmq  # Nome do serviço RabbitMQ no Docker Compose
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
    depends_on:
      - rabbitmq  # Aguarda o RabbitMQ estar disponível
#    restart: always  # Reinicia automaticamente o contêiner em caso de falha

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "15672:15672"  # Painel de controle do RabbitMQ
      - "5672:5672"    # Porta de comunicação do RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
#    restart: always  # Reinicia automaticamente o contêiner em caso de falha

  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp

  sonar_db:
      image: postgres:13
      environment:
        POSTGRES_USER: sonar
        POSTGRES_PASSWORD: sonar
        POSTGRES_DB: sonar
      volumes:
        - sonar_db:/var/lib/postgresql
        - sonar_db_data:/var/lib/postgresql/data
volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data: