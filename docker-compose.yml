version: '3.8'

services:

  app:
    image: permissoes-app:latest  # Nome da imagem do aplicativo Spring Boot
    container_name: permissoes-app
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - "9090:9090"  # Porta exposta para acessar a aplicação
    environment:
      # Configurações para o RabbitMQ
      SPRING_RABBITMQ_HOST: rabbitmq  # Nome do serviço RabbitMQ no Docker Compose
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
    depends_on:
      - rabbitmq  # Aguarda o RabbitMQ estar disponível
#    restart: always  # Reinicia automaticamente o contêiner em caso de falha

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "15672:15672"  # Painel de controle do RabbitMQ
      - "5672:5672"    # Porta de comunicação do RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
#    restart: always  # Reinicia automaticamente o contêiner em caso de falha
  # Define a container named 'oldman-jenkins' using the latest official Jenkins Image.
  oldman-jenkins:
    image: jenkins/jenkins:lts-jdk17
    ports:
      # Map port 8080 of the host to port 8080 within the container to access Jenkins web interface.
      - "8080:8080"
    volumes:
      # Mount a volume named 'jenkins-vol' to persist Jenkins data across container restarts.
      - jenkins-vol:/var/jenkins_home

volumes:
  # Define a Docker volume named 'jenkins-vol' to persist Jenkins data.
  jenkins-vol:
    driver: local # Specify the volume driver as local